<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task-4.3.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd">

  <!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure
                  (DispatcherServlet 컨텍스트 :이 서블릿의 요청 처리 인프라를 정의합니다.)
   -->
  
  <!-- Enables the Spring MVC @Controller programming model -->
  <!--  Spring MVC가 @Controller에 요청을 보내기 위해 필요한 HandlerMapping과 HandlerAdapter를 bean으로 등록함.
    - 해당 태그가 작성되어야지만 @RequestMapping, @ExceptionHandler와 같은 어노테이션을 사용할 수 있음.
   -->
  <annotation-driven />


  <!-- 정적 자원 호출 경로 지정 -->
  <!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
  <resources mapping="/resources/**" location="/resources/" />


  <!-- View Resolver 
    Controller에서 반환된 View 이름을 토대로 처리할 View를 검색
    prefix(접두사) + 반환된 View 이름 + suffix(접미사)
  -->
  <!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
  <beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <beans:property name="prefix" value="/WEB-INF/views/" />
    <beans:property name="suffix" value=".jsp" />
  </beans:bean>
  
  <!-- 빈 스캐닝
    지정된 패키지에 있는 @Component와 그 구체화 요소들을 스캔하여 bean으로 등록함.
    (빈으로 등록 됐다 == 스프링 컨테이너가 제어할 수 있다(IOC) == 빈으로 등록된 클래스는 별도 객체 생성을 하지 않아도 스프링 컨테이너에 의해 의존적으로 자동 객체 생성, 주입된다(DI)
   -->
  <context:component-scan base-package="com.kh.am_admin" />
  
  <task:annotation-driven/> 
  
</beans:beans>
